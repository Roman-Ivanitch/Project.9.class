/*****************************************************************************
 *                            Bridge - Мост 
 *                            Устройство 1
 *                            TX/RX
 *                            Передатчик Приемник
 *****************************************************************************
 *
 * Автор: Обушенков Алексей Андреевич    
 * Группа в ВК https://vk.com/engineer24
 * Канал на YouTube https://www.youtube.com/channel/UCih0Gcl9IEdkR8deDJCiodg
 * Инженерка Engineering room
 * 
 ***************************************************************************** 
 * Скетч собран по материалам сайта http://docs.blynk.cc/
 *****************************************************************************
 * Модули в составе проекта
 * ESP8266 NodeMCU V3 Lua WIFI (3,75 $) https://goo.gl/GFDYq0
 * 
 *****************************************************************************
 * В чем суть скетча
 * Bridge - Мост
 * Связываем два устройства при помощи Blynk
 * в моем случае это две ESP8266
 * 
 *****************************************************************************
 * V1 - Занет Виджетом Мост
 * V5 - Это кнопка в приложении по нажатию которой мы зажигаем светодиод на
 * втором Устройстве и Отсылаем 1 в виджет Дисплей и текст на второй дисплей
 * V7 - Сюда поступают данные от Второго Устройства
 * V4 - Дисплей на него выводим данные поступающие от Второго Устройства
 *  
 *****************************************************************************
 */
 

/* Comment this out to disable prints and save space */
#define BLYNK_PRINT Serial

// Библиотеки ESP и Blynk
#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>

// Ваш Токен (Приходит на E-mail). Токен Устройства 1
char auth[] = "Токен Устройства 1";

// WiFi настройки.
// Логин и пароль.
char ssid[] = "Логин";
char pass[] = "Пароль";

// Виджет моста инициализируем. Он занимает один виртуальный пин к примеру (V1)
// Благодаря этому физичискими пинами можно управлять напрямую
// Примеры управляющих строк ниже
WidgetBridge bridge1(V1);

// на пин V5 сажаем кнопку (switch)
    BLYNK_WRITE(V5) // Принемаем значение из приложения
{
      int pinData = param.asInt(); // Считываем значение и сохраняем в переменную
    
    if (pinData == HIGH) // Если кнопка нажата, то
    {
      // Все это передается на второе устройство
    bridge1.digitalWrite(D0, LOW);  // Цифровой Pin D0 (GPIO 16) Включаем ON
                                    // Им управляем напрямую, то есть дополнительно на Устройстве 2
                                    // ничего не прописываем

                                    
    bridge1.virtualWrite(V2, 1); // Отправляем 1. Добавьте оброботчик на принимающей стороне BLYNK_WRITE(V4)
    bridge1.virtualWrite(V3, "One"); // Отправляем текст. Добавьте оброботчик на принимающей стороне BLYNK_WRITE(V5)
    }
    else // Иначе
    {
    bridge1.digitalWrite(16, HIGH); // Цифровой Pin D0 (GPIO 16) Выключаем OFF
                                    // Им управляем напрямую, то есть дополнительно на Устройстве 2
                                    // ничего не прописываем

                                    
    bridge1.virtualWrite(V2, 0); // Отправляем 0. Добавьте оброботчик на принимающей стороне BLYNK_WRITE(V4)
    bridge1.virtualWrite(V3, "Ноль"); // Отправляем текст. Добавьте оброботчик на принимающей стороне BLYNK_WRITE(V5)
    }
    
}//BLYNK_WRITE(V5)

BLYNK_WRITE(V7) //Принимаем значение от Второго Устройства
{
  int pinData = param.asInt(); // Считываем значение и сохраняем в переменную
  Blynk.virtualWrite(V4, pinData); // Выводим в приложение
}

    /////////////////////////////////////////////////////////////////////////////////////////
    //  Имейте в виду, что при выполнении virtualWrite с bridge мост,
    //  второе устройство нужно обрабатывать входящую команду.
    //  Это можно сделать с помощью этого обработчика на второй доске:
    //
    //    BLYNK_WRITE(V5){
    //    int pinData = param.asInt(); // pinData variable will store value that came via Bridge
    //    }
    //
    //    Используйте знакомые функции для управления другим устройством:
    //    bridge.digitalWrite(8, HIGH)
    //    bridge.digitalWrite("A0", LOW) // <- цель должна поддерживать имя пина "Named pins"
    //    bridge.analogWrite(3, 123)
    //    bridge.virtualWrite(V1, "hello")
    //
    /////////////////////////////////////////////////////////////////////////////////////////

    /////////////////////////////////////////////////////////////////////////////////////////
    //
    //  Фактические значения передаются в виде строк,
    //  поэтому нет никакого практического ограничения на данные, которые могут быть отправлены.
    //
    //  param.asInt(); целое число -32 768 до 32 767 int занимает 2 байта памяти
    //
    //  param.asFloat(); Числа с плавающей запятой от -3.4028235E+38 до 3.4028235E+38.
    //                   Переменная типа float занимает 32 бита (4 байта) в памяти
    //
    //  param.asDouble(); Тип данных double, в отличие от большинства языков программирования,
    //                    имеет ту же точность, что и тип float и занимает также 4 байта памяти
    //
    //  param.asStr(); строки
    //
    /////////////////////////////////////////////////////////////////////////////////////////
    
BLYNK_CONNECTED() {
  bridge1.setAuthToken("Токен Устройства 2"); // Сюда пишем Токен Второго устройства
}

void setup()
{
  // Debug console
  Serial.begin(9600);

  Blynk.begin(auth, ssid, pass);

}

void loop()
{
  Blynk.run();
}
